@page "/vector-search"
@using app.Models
@using app.Services
@using MudBlazor
@inject ProductService ProductService
@inject VectorService VectorService

<PageTitle>Vector Search - SampleStore</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudText Typo="Typo.h3" Class="mb-4">Vector Search</MudText>

    <MudPaper Elevation="2" Class="pa-4 mb-4">
        <MudText Typo="Typo.body1" Class="mb-4">
            Find products using semantic vector search. Enter a description or keywords and discover relevant products.
        </MudText>
        <MudGrid>
            <MudItem xs="12" sm="7">
                <MudTextField T="string" Label="Search Products" Variant="Variant.Outlined"
                              @bind-Value="searchQuery" Placeholder="e.g. wireless headphones with noise cancellation"
                              Immediate="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                              HelperText="Describe what you're looking for" />
            </MudItem>
            <MudItem xs="12" sm="3">
                <MudNumericField T="int" Label="Max Results" Variant="Variant.Outlined"
                                 @bind-Value="top" Min="1" Max="100" Immediate="true"
                                 HelperText="Number of results to show" />
            </MudItem>
            <MudItem xs="12" sm="2" Class="d-flex align-center">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                           OnClick="SearchProducts" Disabled="@isSearching">
                    @(isSearching ? "Searching..." : "Search")
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (isSearching)
    {
        <div class="d-flex justify-center my-6">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="mb-4">@errorMessage</MudAlert>
    }

    @if (searchResults is not null && searchResults.Any())
    {
        <MudText Typo="Typo.h5" Class="mb-4">Results</MudText>
        <MudGrid>
            @foreach (var product in searchResults)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="2" Class="h-100">
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@product.Name</MudText>
                            <MudText Typo="Typo.body2" Class="mt-2">
                                @(product.Description.Length > 150 ? product.Description.Substring(0, 150) + "..." : product.Description)
                            </MudText>
                            <div class="mt-3">
                                @foreach (var productTag in product.ProductTags?.Take(3) ?? Enumerable.Empty<ProductTag>())
                                {
                                    <MudText Color="Color.Primary" Typo="Typo.caption" Class="mr-1 pa-1 rounded mud-border-primary" Style="border: 1px solid">
                                        @productTag.Tag.Name
                                    </MudText>
                                }
                                @if ((product.ProductTags?.Count ?? 0) > 3)
                                {
                                    <MudText Color="Color.Secondary" Typo="Typo.caption">+@((product.ProductTags?.Count ?? 0) - 3) more</MudText>
                                }
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                       Href="@($"/products/{product.Id}")">
                                View Details
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else if (!isSearching && searchResults is not null)
    {
        <MudAlert Severity="Severity.Info" Class="mb-4">
            No products found matching your search. Try different keywords or browse all products.
        </MudAlert>
        <div class="d-flex justify-center mt-4">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="/products">
                Browse All Products
            </MudButton>
        </div>
    }
</MudContainer>

@code {
    private string searchQuery = string.Empty;
    private int top = 20;
    private List<Product>? searchResults;
    private bool isSearching = false;
    private string errorMessage = "";

    private async Task SearchProducts()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            errorMessage = "Please enter a search query.";
            searchResults = null;
            return;
        }

        try
        {
            errorMessage = "";
            isSearching = true;
            StateHasChanged();

            var products = await VectorService.Query(searchQuery, top);
            searchResults = products?.ToList() ?? new List<Product>();
            if (searchResults.Count == 0)
            {
                errorMessage = "No products matched your query. Try different terms or browse all products.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            searchResults = new List<Product>();
        }
        finally
        {
            isSearching = false;
        }
    }
}
