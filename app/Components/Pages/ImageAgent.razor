@page "/imageagent"
@using app.Models
@using app.Services
@using MudBlazor
@using System.IO
@inject AIService AIService
@inject ProductService ProductService
@inject ISnackbar Snackbar

<PageTitle>Image Agent - SampleStore</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
    <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Visual Product Finder</MudText>
    
    <MudPaper Elevation="3" Class="pa-4 mb-6">
        <MudText Typo="Typo.body1" Class="mb-4">
            Upload an image and our AI will analyze it to find similar products in our catalog.
            The AI will identify objects, their characteristics, and suggest matching products.
        </MudText>
        
        <div class="d-flex justify-center flex-column">
            <InputFile id="fileInput" OnChange="OnInputFileChanged" accept=".jpg,.jpeg,.png" class="d-none" />
            <MudButton HtmlTag="label"
                      Variant="Variant.Filled" 
                      Color="Color.Primary"
                      StartIcon="@Icons.Material.Filled.CloudUpload"
                      for="fileInput">
                Upload Image
            </MudButton>
            
            @if (selectedFile != null)
            {
                <MudText Typo="Typo.body2" Class="mt-2 mb-4">Selected file: @selectedFile.Name</MudText>
                <div class="d-flex justify-center">
                    <MudImage Src="@imageDataUrl" Alt="Selected image" Width="300" Class="rounded" />
                </div>
                <div class="d-flex justify-center mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" 
                              OnClick="AnalyzeImage" Disabled="@isAnalyzing">
                        @(isAnalyzing ? "Analyzing..." : "Find Matching Products")
                    </MudButton>
                </div>
            }
        </div>
    </MudPaper>
    
    @if (isAnalyzing)
    {
        <div class="d-flex justify-center my-6">
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Class="my-4">@errorMessage</MudAlert>
    }
    
    @if (analysisResult != null)
    {
        <MudExpansionPanels Class="mb-4">
            <MudExpansionPanel Text="Image Analysis Results" isInitiallyExpanded="true">
                <MudText Typo="Typo.body1" Class="mb-2"><strong>Description:</strong> @analysisResult.Description</MudText>
                
                <MudText Typo="Typo.body1" Class="mb-2 mt-4"><strong>Detected Objects:</strong></MudText>
                <div class="d-flex flex-wrap gap-1 mb-2">
                    @foreach (var obj in analysisResult.Objects)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Class="rounded-pill">
                            @obj
                        </MudButton>
                    }
                </div>
                
                <MudText Typo="Typo.body1" Class="mb-2 mt-4"><strong>Characteristics:</strong></MudText>
                <div class="d-flex flex-wrap gap-1 mb-2">
                    @foreach (var characteristic in analysisResult.Characteristics)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small" Class="rounded-pill">
                            @characteristic
                        </MudButton>
                    }
                </div>
                
                <MudText Typo="Typo.body1" Class="mb-2 mt-4"><strong>Suggested Categories:</strong></MudText>
                <div class="d-flex flex-wrap gap-1 mb-2">
                    @foreach (var category in analysisResult.SuggestedCategories)
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Small" Class="rounded-pill">
                            @category
                        </MudButton>
                    }
                </div>
            </MudExpansionPanel>
        </MudExpansionPanels>
    }
    
    @if (searchResults != null && searchResults.Any())
    {
        <MudText Typo="Typo.h5" Class="mb-4">Matching Products</MudText>
        
        <MudGrid>
            @foreach (var product in searchResults)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudCard Elevation="2" Class="h-100">
                        <MudCardContent>
                            <MudText Typo="Typo.h5">@product.Name</MudText>
                            <MudText Typo="Typo.body2" Class="mt-2">
                                @(product.Description.Length > 150 ? product.Description.Substring(0, 150) + "..." : product.Description)
                            </MudText>
                            <div class="mt-3">
                                @foreach (var productTag in product.ProductTags.Take(3))
                                {
                                    <MudText Color="Color.Primary" Typo="Typo.caption" Class="mr-1 pa-1 rounded mud-border-primary" Style="border: 1px solid">
                                        @productTag.Tag.Name
                                    </MudText>
                                }
                                @if (product.ProductTags.Count > 3)
                                {
                                    <MudText Color="Color.Secondary" Typo="Typo.caption">+@(product.ProductTags.Count - 3) more</MudText>
                                }
                            </div>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                      Href="@($"/products/{product.Id}")">
                                View Details
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
    }
    else if (!isAnalyzing && searchResults != null)
    {
        <MudAlert Severity="Severity.Info" Class="my-4">
            No products found matching your image. Try a different image or check our product catalog.
        </MudAlert>
        
        <div class="d-flex justify-center mt-4">
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Href="/products">
                Browse All Products
            </MudButton>
        </div>
    }
</MudContainer>

@code {
    private IBrowserFile? selectedFile;
    private string? imageDataUrl;
    private byte[]? imageData;
    private List<Product>? searchResults = null;
    private ImageAnalysisResult? analysisResult = null;
    private bool isAnalyzing = false;
    private string errorMessage = "";
    
    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;
            
            // Read the image file
            using var stream = new MemoryStream();
            await e.File.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(stream); // 10MB limit
            
            // Store the image data for analysis
            imageData = stream.ToArray();
            
            // Create a data URL for display
            var base64 = Convert.ToBase64String(imageData);
            var fileType = e.File.ContentType;
            imageDataUrl = $"data:{fileType};base64,{base64}";
            
            // Reset previous results
            searchResults = null;
            analysisResult = null;
            errorMessage = "";
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error processing file: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
        }
    }
    
    private async Task AnalyzeImage()
    {
        if (selectedFile == null || imageData == null)
        {
            errorMessage = "Please select an image first.";
            return;
        }

        try
        {
            errorMessage = "";
            isAnalyzing = true;
            StateHasChanged(); // Update UI to show loading indicator
            
            // Analyze the image
            analysisResult = await AIService.AnalyzeImageAsync(imageData);
            
            // Find matching products based on the analysis
            searchResults = await AIService.FindProductsFromImageAnalysisAsync(analysisResult);
            
            if (searchResults.Count == 0)
            {
                // No error but also no results
                errorMessage = "No products matched your image. Try a different image or browse all products.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Snackbar.Add(errorMessage, Severity.Error);
            searchResults = new List<Product>();
        }
        finally
        {
            isAnalyzing = false;
        }
    }
}
